# Add an if / else conditional here
if (class1 < 3.0 | class2 < 3.0 | overall_gpa < 3.0) {
print("The applicant should be rejected.")
}
else {
print("The applicant should move on to the interview stage")
}
}
if ( overall_gpa < 3.0 | class1 < 3.0 | class2 < 3.0) {
analyze_applicant2 <- function(grades) {
# Index the first item in the grades vector
class1 <-  grades[1]
# Index the second item in the grades vector
class2 <- grades[2]
# Index the third item in the grades vector
overall_gpa <-  grades[3]
# Add an if / else conditional here
if ( overall_gpa < 3.0 | class1 < 3.0 | class2 < 3.0) {
print("The applicant should be rejected.")
else
analyze_applicant2 <- function(grades) {
# Index the first item in the grades vector
class1 <-  grades[1]
# Index the second item in the grades vector
class2 <- grades[2]
# Index the third item in the grades vector
overall_gpa <-  grades[3]
# Add an if / else conditional here
if ( overall_gpa < 3.0 | class1 < 3.0 | class2 < 3.0) {
print("The applicant should be rejected.")
else {
if ( overall_gpa < 3.0 | class1 < 3.0 | class2 < 3.0) {
print("The applicant should be rejected.")
}
analyze_applicant2 <- function(grades) {
# Index the first item in the grades vector
class1 <-  grades[1]
# Index the second item in the grades vector
class2 <- grades[2]
# Index the third item in the grades vector
overall_gpa <-  grades[3]
# Add an if / else conditional here
if ( overall_gpa < 3.0 | class1 < 3.0 | class2 < 3.0) {
print("The applicant should be rejected.")
}
else {
print("The applicant should move on to the interview stage.")
}
}
# For the second analyze_applicant2() function, applicants should be rejected if any of their class grades or their overall GPA is lower than 3.0.
analyze_applicant2 <- function(grades) {
# Index the first item in the grades vector
class1 <-  grades[1]
# Index the second item in the grades vector
class2 <- grades[2]
# Index the third item in the grades vector
overall_gpa <-  grades[3]
# Add an if / else conditional here
if ( overall_gpa < 3.0 | class1 < 3.0 | class2 < 3.0) {
print("The applicant should be rejected.")
}
else {
print("The applicant should move on to the interview stage.")
}
}
# Test your analyze_applicant2() function
# Should be accepted
analyze_applicant2(student3_grades)
# Should be rejected
analyze_applicant2(student2_grades)
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv")
np_data$State
pocket_df %>% filter(brand = "Abercrombie")
library(dplyr)
pocket_df %>% filter(brand = "Abercrombie")
pocket_df <- read.csv("https://pudding.cool/2018/08/pockets/", stringsAsFactors = FALSE)
pocket_df %>% filter(brand = "Abercrombie")
pocket_df %>% filter(price > 70)
pocket_df <- read.csv("https://pudding.cool/2018/08/pockets/", stringsAsFactors = FALSE)
pocket_df <- read.csv("https://github.com/the-pudding/data/blob/master/pockets/measurements.csv",
library(dplyr)
gender <- pocket_df$menWomen
pocket_df <- read.csv("https://pudding.cool/2018/08/pockets/", stringsAsFactors = FALSE)
library(dplyr)
gender <- pocket_df$menWomen
gender <- pocket_df %>% "menWomen"
gender <- pocket_df$menWomen
gender <- pocket_df %>% select("menWomen")
pocket_df <- read.csv("https://github.com/the-pudding/data/raw/master/pockets/measurements.csv")
gender <- pocket_df %>% select("menWomen")
filter(gender == "men")
pocket_df <- read.csv("https://github.com/the-pudding/data/raw/master/pockets/measurements.csv")
library(dplyr)
# Extract the column "menWomen" from the dataframe and save as the variable `gender`
# gender <- pocket_df[[menWomen]]
gender <- pocket_df %>% select("menWomen")
filter(gender == "men")
pocket_df %>% filter(gender == "men")
count(pocket_df %>% filter(gender == "men"))
count(pocket_df %>% filter(gender == "women"))
# Try to filter the gender vector for only "women." (Hint: your first approach might not work, and you might have to use a built-in function to clean the data!) Then find out how many values correspond to "women"
nrow(pocket_df)
front_pockets <- pocket_df$maxHeightFront
pocket_df %>% group_by(front_pockets) %>% summarize(avg_height == mean(front_pockets))
# What is the average height of front pockets in the dataset?
pocket_df %>% summarize(avg_height == mean(front_pockets))
mean(front_pockets, na.rm = TRUE)
max(front_pockets)
mean(front_pockets)
min(front_pockets)
num_abercrombie_pants <- nrow(
pocket_df %>%
filter(brand == "Abercrombie") %>%
select(price)
)
# correct answer
gsub("%.*", "", pocket_df$fabric)
# Extract the column brand into the variable all_brands
all_brands <- pocket_df$brand
# Write a function report_brand() that reports how many pockets from each brand are included in the data
# The function should return a message that reads "There are [X] brands that match [Name of Brand] in the dataset."
report_brand <- function(brand_name) {
num_brands <- sum(str_detect(brand, all_brands))
paste("There are", num_brands, "brands that match", brand, "in this dataset")
}
# Call your function and test it on the brand "Guess"
report_brand("Guess")
library(stringr)
library(stringr)
# correct answer
gsub("%.*", "", pocket_df$fabric)
# Extract the column brand into the variable all_brands
all_brands <- pocket_df$brand
# Write a function report_brand() that reports how many pockets from each brand are included in the data
# The function should return a message that reads "There are [X] brands that match [Name of Brand] in the dataset."
report_brand <- function(brand_name) {
num_brands <- sum(str_detect(brand, all_brands))
paste("There are", num_brands, "brands that match", brand, "in this dataset")
}
# Call your function and test it on the brand "Guess"
report_brand("Guess")
library(stringr)
# correct answer
gsub("%.*", "", pocket_df$fabric)
# Extract the column brand into the variable all_brands
all_brands <- pocket_df$brand
# Write a function report_brand() that reports how many pockets from each brand are included in the data
# The function should return a message that reads "There are [X] brands that match [Name of Brand] in the dataset."
report_brand <- function(brand_name) {
num_brands <- sum(str_detect(brand_name, all_brands))
paste("There are", num_brands, "brands that match", brand_name, "in this dataset")
}
# Call your function and test it on the brand "Guess"
report_brand("Guess")
# Call your function and test it on the brand "Abercrombie"
pocket_df %>% filter(brand = "Abercrombie")
# DYPLR Demo
library(dyplr)
library(dpler)
library(dplyer)
library(dplyr)
install.packages(pscl)
install.packages("pscl")
view(presidentalElections)
View(presidentalElections)
View("presidentalElections")
filter(presidentalElections)
install.packages("pscl")
nrow(presidentalElections)
presidentalElections %>% nrow()
# normal call to filter for year 1932
filter(presidentalElections, year == 1932)
# The benefit of pipe is that it lets us chain functions together
presidentalElections %>%
filter(year == 1932) %>%
nrow()
# DYPLR Demo
library(dplyr)
install.packages("pscl")
View(presidentalElections)
nrow(presidentalElections)
# DYPLR Demo
library(dplyr)
install.packages("pscl")
View(presidentalElections)
nrow(presidentalElections)
intall.packages("pscl")
install.packages("pscl")
library(dplyr)
View(presidentalElections)
nrow(presidentalElections)
View(presidentialElections)
nrow(presidentialElections)
np_date <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv")
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv")
np_data <- np_data %>%
mutate(park_state = paste0(ParkName, ", ", State))
View(np_data)
max_rec_visits <-
np_data %>%
filter(np_data == max(RecreationVisits))
max_rec_visits <-
np_data %>%
filter(max_rec_visits == max(RecreationVisits))
max_visits <- pull(max_rec_visits)
max_rec_visits <-
np_data %>%
filter(np_data == max(RecreationVisits))
min_visits_row <-
pres_df %>%
summarize(min_visits_row == min)
min_visits_row <-
np_data %>%
summarize(min_visits_row == min(np_data))
# DYPLR Demo
library(dplyr)
install.packages("pscl")
View(presidentialElections)
nrow(presidentialElections)
filter(presidentalElections, year == 1932)
pres_df %>%
mutate(repVote = 100 - demVote)
# DYPLR Demo
library(dplyr)
install.packages("pscl")
View(presidentialElections)
nrow(presidentialElections)
filter(presidentalElections, year == 1932)
View(presidentialElections)
pres_data <- View(presidentialElections)
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv")
avg_park_visits <- np_data %>%
group_by(ParkName) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_park_visits)
View(avg_park_visits)
View(np_data)
avg_park_visits <- np_data %>%
group_by(State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_state_visits)
avg_state_visits <- np_data %>%
group_by(State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_state_visits)
avg_park__state_visits <- np_data %>%
group_by(State, ParkName) %>%
summarize(avg_visits = mean(RecreationVisits))
avg_park__state_visits <- np_data %>%
group_by(State, ParkName) %>%
summarize(avg_visits = mean(RecreationVisits)).groups
# Load the National Park data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv")
View(np_data)
# Find the average number of visits for each National Park
# Save as avg_park_visits and View()
# What park has the most and least average visits?
# What patterns or surprises do you notice?
avg_park_visits <- np_data %>%
group_by(ParkName) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_park_visits)
min(avg_park_visits)
item <- min(avg_park_visits)
item <- min(avg_park_visits)
avg_state_visits <- np_data %>%
group_by(State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_state_visits)
# Find the average number of visits for each National Park AND state (group by two columns!)
# Save as avg_park__state_visits and View()
# What National Park has the most and least average visits?
# What patterns or surprises do you notice?
avg_park__state_visits <- np_data %>%
group_by(State, ParkName) %>%
summarize(avg_visits = mean(RecreationVisits))
# DYPLR Demo
library(dplyr)
install.packages("pscl")
View(presidentialElections)
nrow(presidentialElections)
View(presidentialElections)
View(presidentialElections)
nrow(presidentialElections)
library(dplyr)
install.packages("pscl")
View(presidentialElections)
pres_data <- View(presidentialElections)
library(pscl)
View(presidentialElections)
library(pscl)
View(presidentialElections)
#pipe operator version
presidentalElections %>% nrow()
# The benefit of pipe is that it lets us chain functions together
presidentialElections %>%
filter(year == 1932) %>%
nrow()
# There's 48 states of data because there were 48 states in 1932
# how to getting the republican vote
pres_df %>%
mutate(repVote = 100 - demVote)
# pipe takes the result and sticks it in the parenthesis here
# normal call to filter for year 1932
filter(presidentialElections, year == 1932)
# We normally use it with the pipe operator where you use the name of the dataset
# And then you pipe it to the function filter, and it makes the result of that
# Within the first spot
# The benefit of pipe is that it lets us chain functions together
presidentialElections %>%
filter(year == 1932) %>%
nrow()
# There's 48 states of data because there were 48 states in 1932
# how to getting the republican vote
pres_data %>%
mutate(repVote = 100 - demVote)
pres_data <- presidentialElections
# get the value from the data frame above
# shorthand way of doing this
min_dem_vote_rows <-
pres_data %>%
filter(demVote == min(demVote))
# Group By <- obvious to group by, state year or state, categories
# you can say what's the average dem vote by state
# average dem vote for each state accross all years
state_demoVote_avgs <-
pres_df %>%
group_by(state) %>%
summarize(avg_demVote = mean(demVote))
# How can we get the minimum votes for democratic party?
pres_data %>%
summarize(min_demo_vote = min(demVote))
# get the value from the data frame above
# shorthand way of doing this
min_dem_vote_rows <-
pres_data %>%
filter(demVote == min(demVote))
# Group By <- obvious to group by, state year or state, categories
# you can say what's the average dem vote by state
# average dem vote for each state accross all years
state_demoVote_avgs <-
pres_df %>%
group_by(state) %>%
summarize(avg_demVote = mean(demVote))
# How can we get the minimum votes for democratic party?
pres_data %>%
summarize(min_demo_vote = min(demVote))
# get the value from the data frame above
# shorthand way of doing this
min_dem_vote_rows <-
pres_data %>%
filter(demVote == min(demVote))
# Group By <- obvious to group by, state year or state, categories
# you can say what's the average dem vote by state
# average dem vote for each state accross all years
state_demoVote_avgs <-
pres_data %>%
group_by(state) %>%
summarize(avg_demVote = mean(demVote))
# arrange lets us sort by something, you give it the column you want to sort by
# pull lets you get specific values out of a data frame, pull gets the values out
# of that column (most questions in the homework are going to have that)
# Getting min values from democratic vote
pres_data %>%
summarize(min_dem_vote = min(demVote))
# Getting min values from democratic vote
pres_data %>%
summarize(min_dem_vote = min(demVote))
# save the value in another area from the data frame above
min_dem_vote <-
pres_data %>%
summarize(min_dem_vote = min(demVote)) %>%
pull(min_dem_vote)
# But how to get what row it happened in
min_dem_vote_rows <-
pres_df %>%
filter(demVote == min_dem_vote)
# Getting min values from democratic vote
pres_data %>%
summarize(min_dem_vote = min(demVote))
# save the value in another area from the data frame above
min_dem_vote <-
pres_data %>%
summarize(min_dem_vote = min(demVote)) %>%
pull(min_dem_vote)
# But how to get what row it happened in
min_dem_vote_rows <-
pres_data %>%
filter(demVote == min_dem_vote)
# A shorthand way of doing these steps
min_dem_vote_rows <-
pres_data %>%
filter(demVote == min(demVote))
max_dem_vote_rows <-
pres_data %>%
filter(demVote == max(demVote))
# Olympic NP, WA
np_data <- np_data %>%
mutate(park_state = paste0(ParkName, ", ", State))
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv")
# Olympic NP, WA
np_data <- np_data %>%
mutate(park_state = paste0(ParkName, ", ", State))
# Save this filtered row as max_visits_row
max_rec_visits <-
np_data %>%
filter(np_data == max(RecreationVisits))
max_visits <- pull(max_rec_visits)
max_visits <- np_data %>%
filter(RecreationVisits == max(RecreationVisits)) %>% pull(RecreationVisits)
max_visits <- np_data %>%
filter(RecreationVisits == max(RecreationVisits)) %>% pull(RecreationVisits)
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <- np_data %>%
filter(RecreationVisits == min(RecreationVisits))
# get the value from the data frame above
min_visits_row <-
np_data %>%
summarize(min_visits_row == min(np_data))
# Load the National Park data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv")
View(np_data)
# Find the average number of visits for each National Park
# Save as avg_park_visits and View()
# What park has the most and least average visits?
# What patterns or surprises do you notice?
avg_park_visits <- np_data %>%
group_by(ParkName) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_park_visits)
# Find the average number of visits for each state
# Save as avg_state_visits and View()
# What state has the most and least average visits?
# What patterns or surprises do you notice?
avg_state_visits <- np_data %>%
group_by(State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_state_visits)
avg_state_visits <- np_data %>%
group_by(State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_state_visits)
# Find the average number of visits for each National Park AND state (group by two columns!)
# Save as avg_park__state_visits and View()
# What National Park has the most and least average visits?
# What patterns or surprises do you notice?
avg_park__state_visits <- np_data %>%
group_by(State, ParkName) %>%
summarize(avg_visits = mean(RecreationVisits))
# enter your full name (without the dashes)
git config --global user.name "Ivette Ivanov"
# enter your full name (without the dashes)
git config --global user.name "Ivette Ivanov"
shiny::runApp('C:/Users/iveto/Downloads/INFO_201/shiny-name-app-solution')
library(ggplot2)
library(plotly)
library(dplyr)
# Read in data
df <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/blob/main/NationalNames.csv?raw=true")
# Filter the data in some way (aka pick a subset of names to examine — it's too large to include all names for all years)
top_names <- df %>%
group_by(Name) %>%
summarize(total = sum(Count)) %>%
slice_max(n = 100, order_by = total)
subset_df <- df %>% filter(Name %in% top_names$Name)
server <- function(input, output) {
output$names_plot <- renderPlotly({
filtered_df <- subset_df %>%
# Filter for user's gender selection
filter(Gender %in% input$gender_selection) %>%
# Filter for user's name selection
filter(Name %in% input$name_selection) %>%
# Filter for user's year selection
filter(Year > input$year_selection[1] & Year < input$year_selection[2])
# Line plot
names_plot <- ggplot(data = filtered_df) +
geom_line(mapping =
aes(x = Year,
y = Count,
color = Name))
return(names_plot)
})
}
library(shiny)
source("ui.R")
library(bslib)
#install.packages("htmlwidgets", type = "binary")
#install.packages("DT", type = "binary")
# Preview and Select a Bootswatch Theme
bs_theme_preview()
library(bslib)
install.packages("htmlwidgets", type = "binary")
install.packages("DT", type = "binary")
shiny::runApp('C:/Users/iveto/Downloads/INFO_201/shiny-name-app-solution')
shiny::runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
runApp('C:/Users/iveto/Downloads/Project_Github/Info_201_Final_Project')
